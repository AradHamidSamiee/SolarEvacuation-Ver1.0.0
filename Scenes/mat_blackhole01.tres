[gd_resource type="ShaderMaterial" load_steps=25 format=2]

[sub_resource type="VisualShaderNodeVectorFunc" id=1]
function = 2

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "inv_camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=3]

[sub_resource type="VisualShaderNodeVectorDecompose" id=4]

[sub_resource type="VisualShaderNodeVectorCompose" id=5]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 5

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=8]
operator = 5

[sub_resource type="VisualShaderNodeVectorOp" id=9]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=10]
output_port_for_preview = 0
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorOp" id=12]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeTexture" id=13]
output_port_for_preview = 0
source = 1

[sub_resource type="VisualShaderNodeVectorOp" id=14]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=15]
constant = 3.0

[sub_resource type="VisualShaderNodeScalarConstant" id=16]
constant = 0.5

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "view"

[sub_resource type="VisualShaderNodeFresnel" id=18]

[sub_resource type="VisualShaderNodeScalarOp" id=19]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=20]
function = 15

[sub_resource type="VisualShaderNodeScalarFunc" id=21]
function = 18

[sub_resource type="VisualShaderNodeScalarConstant" id=22]
constant = 5.0

[sub_resource type="VisualShaderNodeInput" id=23]
input_name = "normal"

[sub_resource type="VisualShader" id=24]
code = "shader_type spatial;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0;
	n_out2p0 = NORMAL;

// Input:3
	vec3 n_out3p0;
	n_out3p0 = VIEW;

// Scalar:25
	float n_out25p0;
	n_out25p0 = 0.500000;

// Fresnel:4
	bool n_in4p2 = false;
	float n_out4p0;
	n_out4p0 = n_in4p2 ? (pow(clamp(dot(n_out2p0, n_out3p0), 0.0, 1.0), n_out25p0)) : (pow(1.0 - clamp(dot(n_out2p0, n_out3p0), 0.0, 1.0), n_out25p0));
// Scalar:8
	float n_out8p0;
	n_out8p0 = 5.000000;

// ScalarOp:5
	float n_out5p0;
	n_out5p0 = n_out4p0 * n_out8p0;

// ScalarFunc:6
	float n_out6p0;
	n_out6p0 = round(n_out5p0);

// ScalarFunc:7
	float n_out7p0;
	n_out7p0 = min(max(n_out6p0,0.0),1.0);

// Input:11
	mat4 n_out11p0;
	n_out11p0 = INV_CAMERA_MATRIX;

// Input:9
	vec3 n_out9p0;
	n_out9p0 = NORMAL;

// VectorFunc:10
	vec3 n_out10p0;
	n_out10p0=-(n_out9p0);

// TransformVectorMult:12
	vec3 n_out12p0;
	n_out12p0 = ( n_out11p0 * vec4(n_out10p0, 1.0) ).xyz;

// VectorDecompose:13
	float n_out13p0;
	float n_out13p1;
	float n_out13p2;
	n_out13p0 = n_out12p0.x;
	n_out13p1 = n_out12p0.y;
	n_out13p2 = n_out12p0.z;

// VectorCompose:14
	float n_in14p0 = 0.00000;
	vec3 n_out14p0;
	n_out14p0 = vec3( n_in14p0 , n_out13p1 , n_out13p2 );

// ScalarOp:15
	float n_out15p0;
	n_out15p0 = pow( n_out4p0 , n_out25p0 );

// ScalarOp:16
	float n_in16p0 = 1.00000;
	float n_out16p0;
	n_out16p0 = n_in16p0 - n_out15p0;

// Scalar:23
	float n_out23p0;
	n_out23p0 = 3.000000;

// ScalarOp:17
	float n_out17p0;
	n_out17p0 = pow( n_out16p0 , n_out23p0 );

// VectorOp:18
	vec3 n_out18p0;
	n_out18p0 = n_out14p0 * vec3(n_out17p0);

// Input:19
	vec3 n_out19p0;
	n_out19p0 = vec3(SCREEN_UV,0.0);

// VectorOp:20
	vec3 n_out20p0;
	n_out20p0 = n_out18p0 + n_out19p0;

// Texture:21
	vec3 n_out21p0;
	float n_out21p1;
	{
		vec4 _tex_read = textureLod( SCREEN_TEXTURE , n_out20p0.xy , 0.0 );
		n_out21p0 = _tex_read.rgb;
		n_out21p1 = _tex_read.a;
	}

// VectorOp:22
	vec3 n_out22p0;
	n_out22p0 = vec3(n_out7p0) * n_out21p0;

// Output:0
	ALBEDO = n_out22p0;
	EMISSION = n_out22p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -544.059, -220 )
nodes/fragment/0/position = Vector2( 920, 0 )
nodes/fragment/2/node = SubResource( 11 )
nodes/fragment/2/position = Vector2( -600, -200 )
nodes/fragment/3/node = SubResource( 17 )
nodes/fragment/3/position = Vector2( -600, -120 )
nodes/fragment/4/node = SubResource( 18 )
nodes/fragment/4/position = Vector2( -400, -200 )
nodes/fragment/5/node = SubResource( 19 )
nodes/fragment/5/position = Vector2( -80, -20 )
nodes/fragment/6/node = SubResource( 20 )
nodes/fragment/6/position = Vector2( 100, 0 )
nodes/fragment/7/node = SubResource( 21 )
nodes/fragment/7/position = Vector2( 320, 0 )
nodes/fragment/8/node = SubResource( 22 )
nodes/fragment/8/position = Vector2( -600, 40 )
nodes/fragment/9/node = SubResource( 23 )
nodes/fragment/9/position = Vector2( 0, -540 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 260, -480 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 200, -600 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 480, -580 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 720, -580 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 600, -400 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( 0, -200 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( 200, -200 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( 400, -200 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( 600, -200 )
nodes/fragment/19/node = SubResource( 10 )
nodes/fragment/19/position = Vector2( 0, 200 )
nodes/fragment/20/node = SubResource( 12 )
nodes/fragment/20/position = Vector2( 240, 200 )
nodes/fragment/21/node = SubResource( 13 )
nodes/fragment/21/position = Vector2( 440, 200 )
nodes/fragment/22/node = SubResource( 14 )
nodes/fragment/22/position = Vector2( 660, 200 )
nodes/fragment/23/node = SubResource( 15 )
nodes/fragment/23/position = Vector2( 200, -80 )
nodes/fragment/25/node = SubResource( 16 )
nodes/fragment/25/position = Vector2( -600, -40 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 0, 3, 0, 4, 1, 5, 0, 6, 0, 6, 0, 7, 0, 8, 0, 5, 1, 9, 0, 10, 0, 10, 0, 12, 1, 11, 0, 12, 0, 12, 0, 13, 0, 13, 1, 14, 1, 13, 2, 14, 2, 16, 0, 17, 0, 17, 0, 18, 1, 14, 0, 18, 0, 19, 0, 20, 1, 18, 0, 20, 0, 20, 0, 21, 0, 23, 0, 17, 1, 15, 0, 16, 1, 21, 0, 22, 1, 25, 0, 4, 3, 4, 0, 15, 0, 25, 0, 15, 1, 4, 0, 5, 0, 7, 0, 22, 0, 22, 0, 0, 5, 22, 0, 0, 0 )

[resource]
shader = SubResource( 24 )
